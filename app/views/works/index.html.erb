<!--Descriptive page name and system messages, descriptions, and instructions.-->
<h2 class="heading">
  <%= search_header @works, @search, "Work", @owner %>
</h2>
<!-- /end descriptions-->

<!--Subnavigation, sorting and actions.-->
<% if @collection || @tag || @user %>
  <div class="navigation actions module">
    <h3 class="landmark heading"><%= ts("Navigation and Actions") %></h3>
    <!--gift search subnav-->
    <% if @collection && @collection.gift_exchange? %>
      <%= render 'gifts/gift_search' %>
    <% end %>
    <!--user role subnav-->
    <% if @tag || @user || @collection %>
      <ul class="user navigation actions" role="navigation">
        <% if @user %>
          <% if @user == current_user %>
            <li id="edit_multiple"><%= link_to ts('Edit Works'), show_multiple_user_works_path(@user) %></li>
          <% end %>
          <li><%= span_if_current ts('Works in Collections'), collected_user_works_path(@user) %></li>
          <li><%= span_if_current ts('Works'), user_works_path(@user) %></li>
        <% end %>
        <% if @tag && !@collection %>
          <li><%= span_if_current ts('Works'), tag_works_path(@tag) %></li>
          <li><%= span_if_current ts('Bookmarks'), tag_bookmarks_path(@tag) %></li>
        <% end %>
        <% if @facets.present? %>
          <% # Filters button for narrow screens jumps to filters when JavaScript is disabled and opens filters when JavaScript is enabled %>
          <li class="narrow-shown hidden"><a href="#work-filters" id="go_to_filters"><%= ts("Filters") %></a></li>
        <% end %>
        <% if @tag && logged_in? && !@collection %>
          <li><%= render 'favorite_tags/form', current_user: @current_user, favorite_tag: @favorite_tag %></li>
        <% end %>
        <% if @tag && !@collection && (%w(Fandom Character Relationship).include?(@tag.type.to_s) || @tag.name == "F/F") %>
          <li><%= link_to_rss feed_tag_path(:id => @tag.id, :format => :atom) %></li>
        <% end %>
      </ul>
    <% end %>
  </div>
<% end %>
<!---/subnav-->

<% unless @owner.present? %>
  <p><%= ts("These are some of the latest works posted to the Archive. To find more works, #{link_to 'choose a fandom', media_path} or #{link_to 'try our advanced search', search_works_path}.").html_safe %>
<% end %>

<% if @works.respond_to?(:total_pages) %>
  <%= will_paginate @works %>
<% end %>

<!--main content-->
<h3 class="landmark heading"><%= ts("Listing Works") %></h3>
<ol class="work index group">
  <%= render partial: 'work_blurb', collection: @works, as: :work %>
</ol>

<!--/content-->

<!--filters subnav-->
<% if @facets.present? %>
  <%= render "filters" %>
<% end %>
<!---/subnav-->

<% if @works.respond_to?(:total_pages) %>
  <%= will_paginate @works %>
<% end %>

<%= content_for :footer_js do %>
  <%= javascript_tag do %>
    $j(document).ready(function() {
      var username = $j("#greeting").find(".username").text();

      $j.ajax({
        url: '/users/' + username + '/readings',
        type: 'GET',
        dataType: 'json',
        beforeSend: function (xhr) {
          xhr.setRequestHeader('X-CSRF-Token', $j('meta[name="csrf-token"]').attr('content'));
        },
        success: function(data) {
          /* ids of works, extracted from blurbs' id attributes and converted to integers */
          /* The map() method creates a new array with the results of calling a function for every array element. */
          /* The map() method calls the provided function once for each element in an array, in order. */
          var page_work_ids = $j.map($j(".blurb"), function(blurb) {
            return parseInt(blurb.id.replace('work_', ''));
          });

          /* work_id: integer, toread: boolean */
          var readings = data.readings;

          /* a start, but we need to split this into mfl and not */
          /* The filter() method creates an array filled with all array elements that pass a test (provided as a function). */
          var history_works_on_this_page = page_work_ids.filter(function(work_id) {
            return readings.some(function(reading) {
              return reading.work_id === work_id;
            });
          });

          /* TROUBLESHOOTING */
          /* add username and work ids to div */
          $j("#main").prepend("<div style='background: yellow;'><p><b>username:</b> " + username + "</p><p><b>works on this page:</b> " + page_work_ids + "</p></div>");

          console.log(history_works_on_this_page);

          /* ORIGINAL DRAFT FROM HERE DOWN */
          var accessed_work_ids = data.accessed_work_ids;
          var marked_for_later_work_ids = data.marked_for_later_work_ids;
          var accessed_works_on_this_page = page_work_ids.filter(function(id) {
            return accessed_work_ids.indexOf(id) !== -1;
          });

          $j.each(accessed_works_on_this_page, function(i, work) {
            var id_attribute = "#work_" + work;
            console.log(id_attribute);
            $j('.work').find(id_attribute).append("<div style='background: red; color: white'><p>ðŸ‘€ Seen</p></div>");
          });

          /* add new info to a div */
          $j("#main").prepend("<div style='background: pink;'><p><b>accessed works:</b> " + accessed_work_ids + "</p><p><b>marked for later works:</b> " + marked_for_later_work_ids + "</p></div>");

          /* add comparison results to a div */
          $j("#main").prepend("<div style='background: cyan;'><p><b>accessed works on this page:</b> " + accessed_works_on_this_page + "</p></div>");
        },
        error: function(xhr, status, response) {/* your error callback */}
      });
    });
  <% end %>
<% end %>
